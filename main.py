import config
from config import RegState
from config import SetName, SetAge, SetSex, SetCountry, SetCity
import keyboards as kb
from db import DbWorker

import logging
import asyncio
from datetime import datetime, timedelta
from aiopayok import Payok

from aiogram import Bot
from aiogram.types import ParseMode
from aiogram.types.message import ContentTypes
from aiogram.utils import executor, exceptions
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

db = DbWorker(config.DB)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(filename="all_log.log", level=logging.INFO, format='%(asctime)s - %(levelname)s -%(message)s')
warning_log = logging.getLogger("warning_log")
warning_log.setLevel(logging.WARNING)
fh = logging.FileHandler("warning_log.log")
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
warning_log.addHandler(fh)

pay = Payok(api_id=config.API_ID, api_key=config.API_KEY, secret_key=config.SECRET_KEY, shop=config.SHOP_ID)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

@dp.message_handler(lambda message: message.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
@dp.message_handler(commands=['start'])
async def start(message):
	try:
		db.set_state(None, message.from_user.id)
		sp = message.text.split()
		if len(sp) > 1 and not db.user_exists(message.from_user.id):
			user_id = sp[1]
			db.edit_refs(1, user_id)
			db.edit_points(1, user_id)
			if bool(db.get_notifications(user_id)[0]):
				await bot.send_message(user_id, '–ö—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!')
				if db.get_refs(user_id)[0] % 10 == 0:
					await bot.send_message(user_id, '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–∞—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.')
		if not db.user_exists(message.from_user.id):
			await message.answer(f"üéâ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!üéâ\n"
			                     f"–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
			                     f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>–≤–∏–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>\n"
			                     f"–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - /registrate\n"
			                     f"–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ - /rules", parse_mode='HTML')
		else:
			await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {db.get_name(message.from_user.id)[0]}', reply_markup=kb.main_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['help'])
async def help(message):
	try:
		await message.answer(f'/start - –í –Ω–∞—á–∞–ª–æ\n'
		                     f'/rules - –ü—Ä–∞–≤–∏–ª–∞\n'
		                     f'/search - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n'
		                     f'/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥\n'
		                     f'/vip - –ö—É–ø–∏—Ç—å –≤–∏–ø\n'
		                     f'/ref - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞')
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['registrate'])
async def registrate(message):
	if not db.user_exists(message.from_user.id):
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
		await RegState.name.set()


@dp.message_handler(state=RegState.name)
async def set_name(message, state: FSMContext):
	await state.update_data(name=message.text)
	await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (–ú/–ñ).")
	await RegState.sex.set()


@dp.message_handler(state=RegState.sex)
async def set_sex(message, state: FSMContext):
	if message.text == '–º' or message.text == '–ú':
		await state.update_data(sex='male')
		await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.")
		await RegState.age.set()
	elif message.text == '–∂' or message.text == '–ñ':
		await state.update_data(sex='female')
		await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.")
		await RegState.age.set()
	else:
		await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")


@dp.message_handler(state=RegState.age)
async def set_age(message, state: FSMContext):
	if 5 < int(message.text) < 100:
		await state.update_data(age=message.text)
		await message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤–µ—Ç–µ?")
		await RegState.country.set()
	else:
		await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")


@dp.message_handler(state=RegState.country)
async def set_country(message, state: FSMContext):
	await state.update_data(country=message.text)
	await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?")
	await RegState.city.set()


@dp.message_handler(state=RegState.city)
async def set_city(message, state: FSMContext):
	await state.update_data(city=message.text)
	await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∏—Å–∫ - /search.",
	                     reply_markup=kb.main_kb)
	data = await state.get_data()
	db.new_user(data['name'], data['age'], data['sex'], data['country'], data['city'], message.from_user.id)
	await state.finish()
	if db.get_vip_ends(message.from_user.id)[0] is None:
		db.edit_vip_ends((datetime.now() + timedelta(days=7)).strftime('%d.%m.%Y %H:%M'),
		                 message.from_user.id)


@dp.message_handler(commands=['rules'])
@dp.message_handler(lambda message: message.text == '–ü—Ä–∞–≤–∏–ª–∞ üìñ')
async def rules(message):
	try:
		await message.answer(f'<b>–í —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã:</b>\n'
		                     f'1) –õ—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ (–Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤).\n'
		                     f'2) –û–±–º–µ–Ω, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö 18+ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n'
		                     f'3) –õ—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º, –ø—Ä–æ–¥–∞–∂–∞ —á–µ–≥–æ –ª–∏–±–æ.\n'
		                     f'4) –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n'
		                     f'5) –õ—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram.\n',
		                     parse_mode='HTML', reply_markup=kb.to_main_kb)
	except Exception as e:
		warning_log.warning(e)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏


@dp.message_handler(commands=['edit_name'])
@dp.callback_query_handler(lambda call: call.data == 'name')
async def edit_name(call):
	await bot.answer_callback_query(call.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è:')
	db.set_state(SetName.waiting.value, call.from_user.id)


@dp.message_handler(lambda message: db.get_state(message.from_user.id)[0] == SetName.waiting.value)
async def editing_name(message):
	try:
		db.edit_name(message.text, message.from_user.id)
		await bot.send_message(message.from_user.id, "–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=kb.main_kb)
		db.set_state(SetName.nothing.value, message.from_user.id)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['edit_age'])
@dp.callback_query_handler(lambda call: call.data == 'age')
async def edit_age(call):
	await bot.answer_callback_query(call.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:')
	db.set_state(SetAge.waiting.value, call.from_user.id)


@dp.message_handler(lambda message: db.get_state(message.from_user.id)[0] == SetAge.waiting.value)
async def editing_age(message):
	try:
		db.edit_age(message.text, message.from_user.id)
		await bot.send_message(message.from_user.id, "–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=kb.main_kb)
		db.set_state(SetAge.nothing.value, message.from_user.id)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['edit_sex'])
@dp.callback_query_handler(lambda call: call.data == 'sex')
async def edit_sex(call):
	await call.message.edit_reply_markup(reply_markup=kb.sex_kb)
	await bot.answer_callback_query(call.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:')
	db.set_state(SetSex.waiting.value, call.from_user.id)


@dp.callback_query_handler(lambda call: call.data == 'male' or call.data == 'female')
async def editing_sex(call):
	try:
		if call.data == 'male':
			db.edit_sex('male', call.from_user.id)
			await bot.send_message(call.from_user.id, "–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=kb.main_kb)
			await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
			db.set_state(SetSex.nothing.value, call.from_user.id)
		elif call.data == 'female':
			db.edit_sex('female', call.from_user.id)
			await bot.send_message(call.from_user.id, "–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=kb.main_kb)
			await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
			db.set_state(SetSex.nothing.value, call.from_user.id)
		else:
			await call.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['edit_country'])
@dp.callback_query_handler(lambda call: call.data == 'country')
async def edit_country(call):
	await bot.answer_callback_query(call.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:')
	db.set_state(SetCountry.waiting.value, call.from_user.id)


@dp.message_handler(lambda message: db.get_state(message.from_user.id)[0] == SetCountry.waiting.value)
async def editing_country(message):
	try:
		db.edit_country(message.text, message.from_user.id)
		await bot.send_message(message.from_user.id, "–°—Ç—Ä–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=kb.main_kb)
		db.set_state(SetCountry.nothing.value, message.from_user.id)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['edit_city'])
@dp.callback_query_handler(lambda call: call.data == 'city')
async def edit_city(call):
	await bot.answer_callback_query(call.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:')
	db.set_state(SetCity.waiting.value, call.from_user.id)


@dp.message_handler(lambda message: db.get_state(message.from_user.id)[0] == SetCity.waiting.value)
async def editing_city(message):
	try:
		db.edit_city(message.text, message.from_user.id)
		await bot.send_message(message.from_user.id, "–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=kb.main_kb)
		db.set_state(SetCity.nothing.value, message.from_user.id)
	except Exception as e:
		warning_log.warning(e)


# @dp.message_handler(commands=['edit_op_sex'])
# @dp.callback_query_handler(lambda call: call.data == 'op_sex')
# async def edit_op_sex(call):
#     await bot.answer_callback_query(call.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:')
#     db.set_state(SetSets.waiting.value, call.from_user.id)


# @dp.message_handler(lambda message: db.get_state(message.from_user.id)[0] == SetOpSex.waiting.value)
# async def editing_op_sex(message):
#     try:
#         db.edit_op_sex(message.text, message.from_user.id)
#         await bot.send_message(message.from_user.id, "–ü–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
#         db.set_state(SetSets.nothing.value, message.from_user.id)
#     except Exception as e:
#         warning_log.warning(e)


# –ü—Ä–æ—Ñ–∏–ª—å


@dp.message_handler(commands=['profile'])
@dp.message_handler(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å üë§')
async def profile(message):
	try:
		sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
		user_id = message.from_user.id
		if db.get_sex(user_id)[0] == 'male':
			sex = '–ú—É–∂—Å–∫–æ–π'
		elif db.get_sex(user_id)[0] == 'female':
			sex = '–ñ–µ–Ω—Å–∫–∏–π'
		await message.answer(
			f'üÖ∞Ô∏è –ò–º—è: {db.get_name(user_id)[0]}\n\n'
			f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.get_age(user_id)[0]}\n\n'
			f'üë´ –ü–æ–ª: {sex}\n\n'
			f'üåç –°—Ç—Ä–∞–Ω–∞: {db.get_country(user_id)[0]}\n\n'
			f'üèôÔ∏è –ì–æ—Ä–æ–¥: {db.get_city(user_id)[0]}',
			reply_markup=kb.profile_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['settings'])
@dp.message_handler(lambda message: message.text == '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def settings(message):
	await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=kb.settings_kb)


@dp.message_handler(commands=['statistic'])
@dp.message_handler(lambda message: message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def profile(message):
	try:
		user_id = message.from_user.id
		await message.answer(
			f'üí¨ –ß–∞—Ç–æ–≤: {db.get_chats(user_id)[0]}\n\n'
			f'‚å®Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π: {db.get_messages(user_id)[0]}\n\n'
			f'üëç –õ–∞–π–∫–æ–≤: {db.get_likes(user_id)[0]}\n\n'
			f'üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {db.get_dislikes(user_id)[0]}\n\n'
			f'üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {db.get_refs(user_id)[0]}',
			reply_markup=kb.statistic_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['ref'])
@dp.message_handler(lambda message: message.text == 'üíº –†–µ—Ñ–µ—Ä–∞–ª–∫–∞' or message.text == 'üÜì –ü–æ–ª—É—á–∏—Ç—å –≤–∏–ø –±–µ—Å–ø–ª–∞—Ç–Ω–æ')
async def ref(message):
	try:
		user_id = message.from_user.id
		await message.answer(f'–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å üíé\n'
		                     f'1 –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ = 1 üíé\n'
		                     f'5 üíé = 1 –¥–µ–Ω—å VIP-—Å—Ç–∞—Ç—É—Å–∞ üëë\n')
		await message.answer(f'–£ –≤–∞—Å {db.get_points(user_id)[0]} üíé')
		if bool(db.get_notifications(message.from_user.id)[0]):
			await message.answer(f'üÜî –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
			                     f'{"https://t.me/anonchik_chat_bot?start=" + str(user_id)}',
			                     disable_web_page_preview=True, reply_markup=kb.off_kb)
		else:
			await message.answer(f'üÜî –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
			                     f'{"https://t.me/anonchik_chat_bot?start=" + str(user_id)}',
			                     disable_web_page_preview=True, reply_markup=kb.on_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['trade'])
@dp.message_handler(lambda message: message.text == '–û–±–º–µ–Ω—è—Ç—å üíé')
async def trade(message):
	try:
		if db.get_points(message.from_user.id)[0] >= 5:
			db.edit_points(-5, message.from_user.id)
			if db.get_vip_ends(message.from_user.id)[0] is None:
				db.edit_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'),
				                 message.from_user.id)
				await message.answer('–£—Å–ø–µ—à–Ω–æ!')
			else:
				db.edit_vip_ends((datetime.strptime(db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') +
				                  timedelta(days=1)).strftime('%d.%m.%Y %H:%M'), message.from_user.id)
			await message.answer('–£—Å–ø–µ—à–Ω–æ!')
		else:
			await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤')
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî')
async def notifications(message):
	try:
		db.edit_notifications(1, message.from_user.id)
		await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã!', reply_markup=kb.to_main_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == '–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï')
async def notifications(message):
	try:
		db.edit_notifications(0, message.from_user.id)
		await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã!', reply_markup=kb.to_main_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'on')
async def notifications_on(call):
	await db.edit_notifications(1, call.from_user.id)
	await call.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')


@dp.callback_query_handler(lambda call: call.data == 'off')
async def notifications_off(call):
	await db.edit_notifications(1, call.from_user.id)
	await call.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã')


@dp.message_handler(commands=['top'])
@dp.message_handler(lambda message: message.text == 'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏')
async def top(message):
	try:
		await message.answer('–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º', reply_markup=kb.top_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == 'üîù –¢–æ–ø 5 –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º')
async def top(message):
	try:
		sp = list(db.top_messages())
		for i in range(len(sp)):
			if i == 0:
				c = 'ü•á'
			elif i == 1:
				c = 'ü•à'
			elif i == 2:
				c = 'ü•â'
			else:
				c = str(i + 1) + '.'
			await message.answer(f'{c} {sp[i][0]} ‚Äî <b>{sp[i][1]}</b> <i>—Å–æ–æ–±—â–µ–Ω–∏–π</i>', parse_mode='HTML')
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == 'üîù –¢–æ–ø 5 –ø–æ –ª–∞–π–∫–∞–º')
async def top(message):
	try:
		sp = list(db.top_likes())
		for i in range(len(sp)):
			if i == 0:
				c = 'ü•á'
			elif i == 1:
				c = 'ü•à'
			elif i == 2:
				c = 'ü•â'
			else:
				c = str(i + 1) + '.'
			await message.answer(f'{c} {sp[i][0]} ‚Äî <b>{sp[i][1]}</b> <i>–ª–∞–π–∫–æ–≤</i>', parse_mode='HTML')
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == 'üîù –¢–æ–ø 5 –ø–æ —Ä–µ—Ñ–∞–º')
async def top(message):
	try:
		sp = list(db.top_refs())
		for i in range(len(sp)):
			if i == 0:
				c = 'ü•á'
			elif i == 1:
				c = 'ü•à'
			elif i == 2:
				c = 'ü•â'
			else:
				c = str(i + 1) + '.'
			await message.answer(f'{c} {sp[i][0]} ‚Äî <b>{sp[i][1]}</b> <i>—Ä–µ—Ñ–æ–≤</i>', parse_mode='HTML')
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['vip'])
@dp.message_handler(lambda message: message.text == '–í–∏–ø üëë')
async def vip(message):
	try:
		if db.get_vip_ends(message.from_user.id)[0] is not None:
			if datetime.strptime(db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') > datetime.now():
				delta = datetime.strptime(db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') - datetime.now()
				await message.answer(
					f'–û—Å—Ç–∞–ª–æ—Å—å {delta.days} –¥–Ω–µ–π, {delta.seconds // 3600} —á–∞—Å–æ–≤, {delta.seconds // 60 % 60} –º–∏–Ω—É—Ç –í–∏–ø–∞',
					reply_markup=kb.vip_kb)
			else:
				await message.answer(f'–í–∏–ø –¥–∞–µ—Ç:\n'
				                     f'1) –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É.\n'
				                     f'2) –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ: –æ—Ç–∑—ã–≤—ã, –∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Å—Ç—Ä–∞–Ω–∞...\n'
				                     f'3) <b>–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏.\n</b>'
				                     f'<i>–≠—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ, —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è</i>',
				                     reply_markup=kb.vip_kb, parse_mode='HTML')
		else:
			await message.answer(f'–í–∏–ø –¥–∞–µ—Ç:\n'
			                     f'1) –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É.\n'
			                     f'2) –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ: –æ—Ç–∑—ã–≤—ã, –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥\n'
			                     f'3) <b>–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏.\n</b>'
			                     f'<i>–≠—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ, —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è</i>',
			                     reply_markup=kb.vip_kb, parse_mode='HTML')
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['buy_vip'])
@dp.message_handler(lambda message: message.text == 'üí∞ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å –≤–∏–ø')
async def buy_vip(message):
	try:
		await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', reply_markup=kb.buy_kb)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == 'üëë –í–∏–ø –Ω–∞ –¥–µ–Ω—å - 20‚ÇΩ')
async def buy_day(message):
	try:
		c = 0
		tg_id = message.from_user.id
		db.edit_order_id(1, tg_id)
		payment_id = f'{tg_id}-{int(db.get_order_id(tg_id)[0]) + 1}'
		payments = await pay.create_pay(amount=20, currency='RUB', success_url=config.RETURN_URL, desc=payment_id,
		                                payment=payment_id)
		await message.answer(f'<a href="{payments}">–û–ø–ª–∞—Ç–∏—Ç—å 20 —Ä—É–±–ª–µ–π</a>', parse_mode='HTML')
		flag1 = False
		while not flag1:
			for i in [dict(i) for i in list(await pay.get_transactions())]:
				if i['payment_id'] == payment_id:
					if c >= 3600:
						flag1 = True
						break
					if i['transaction_status'] == 1:
						await message.answer('–£—Å–ø–µ—à–Ω–æ')
						if db.get_vip_ends(tg_id)[0] is None:
							db.edit_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'), tg_id)
						else:
							db.edit_vip_ends(
								(datetime.strptime(db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') +
								 timedelta(days=1)).strftime('%d.%m.%Y %H:%M'), message.from_user.id)
						flag1 = True
						break
					else:
						await asyncio.sleep(3)
						c += 3
				else:
					await asyncio.sleep(3)
					c += 3
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == 'üëë –í–∏–ø –Ω–∞ –Ω–µ–¥–µ–ª—é - 100‚ÇΩ')
async def buy_week(message):
	try:
		c = 0
		tg_id = message.from_user.id
		db.edit_order_id(1, tg_id)
		payment_id = f'{tg_id}-{int(db.get_order_id(tg_id)[0]) + 1}'
		payments = await pay.create_pay(amount=100, currency='RUB', success_url=config.RETURN_URL, desc=payment_id,
		                                payment=payment_id)
		await message.answer(f'<a href="{payments}">–û–ø–ª–∞—Ç–∏—Ç—å 100 —Ä—É–±–ª–µ–π</a>', parse_mode='HTML')
		flag1 = False
		while not flag1:
			for i in [dict(i) for i in list(await pay.get_transactions())]:
				if i['payment_id'] == payment_id:
					if c >= 3600:
						flag1 = True
						break
					if i['transaction_status'] == 1:
						await message.answer('–£—Å–ø–µ—à–Ω–æ')
						if db.get_vip_ends(tg_id)[0] is None:
							db.edit_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'), tg_id)
						else:
							db.edit_vip_ends(
								(datetime.strptime(db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') +
								 timedelta(days=7)).strftime('%d.%m.%Y %H:%M'), message.from_user.id)
						flag1 = True
						break
					else:
						await asyncio.sleep(3)
						c += 3
				else:
					await asyncio.sleep(3)
					c += 3
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(lambda message: message.text == 'üëë –í–∏–ø –Ω–∞ –º–µ—Å—è—Ü - 300‚ÇΩ')
async def buy_month(message):
	try:
		c = 0
		tg_id = message.from_user.id
		db.edit_order_id(1, tg_id)
		payment_id = f'{tg_id}-{int(db.get_order_id(tg_id)[0]) + 1}'
		payments = await pay.create_pay(amount=300, currency='RUB', success_url=config.RETURN_URL, desc=payment_id,
		                                payment=payment_id)
		await message.answer(f'<a href="{payments}">–û–ø–ª–∞—Ç–∏—Ç—å 300 —Ä—É–±–ª–µ–π</a>', parse_mode='HTML')
		flag1 = False
		while not flag1:
			for i in [dict(i) for i in list(await pay.get_transactions())]:
				if i['payment_id'] == payment_id:
					if c >= 3600:
						flag1 = True
						break
					if i['transaction_status'] == 1:
						await message.answer('–£—Å–ø–µ—à–Ω–æ')
						if db.get_vip_ends(tg_id)[0] is None:
							db.edit_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'), tg_id)
						else:
							db.edit_vip_ends(
								(datetime.strptime(db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') +
								 timedelta(days=31)).strftime('%d.%m.%Y %H:%M'), message.from_user.id)
						flag1 = True
						break
					else:
						await asyncio.sleep(3)
						c += 3
				else:
					await asyncio.sleep(3)
					c += 3
	except Exception as e:
		warning_log.warning(e)


# –ü–æ–∏—Å–∫


@dp.message_handler(commands=['cancel_search'])
@dp.message_handler(lambda message: message.text == 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫')
async def cancel_search(message):
	try:
		await message.answer('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. üò•\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫',
		                     reply_markup=kb.main_kb)
		db.delete_from_queue(message.from_user.id)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['like'])
@dp.message_handler(lambda message: message.text == 'üëç –õ–∞–π–∫')
async def like(message):
	try:
		await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=kb.main_kb)
		db.edit_likes(1, db.get_last_connect(message.from_user.id)[0])
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['dislike'])
@dp.message_handler(lambda message: message.text == 'üëé –î–∏–∑–ª–∞–π–∫')
async def dislike(message):
	try:
		await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=kb.main_kb)
		db.edit_dislikes(1, db.get_last_connect(message.from_user.id)[0])
	except Exception as e:
		warning_log.warning(e)


class Chatting(StatesGroup):
	msg = State()


@dp.message_handler(commands=['search'])
@dp.message_handler(lambda message: message.text == '–†–∞–Ω–¥–æ–º üîÄ' or message.text == '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥')
async def search(message):
	try:
		db.add_to_queue(message.from_user.id, db.get_sex(message.from_user.id)[0])
		await message.answer('–ò—â–µ–º –¥–ª—è –≤–∞—Å —á–µ–ª–æ–≤–µ—á–∫–∞.. üîç', reply_markup=kb.cancel_search_kb)
		while True:
			await asyncio.sleep(0.5)
			if db.search(message.from_user.id)[0] is not None:
				db.update_connect_with(db.search(message.from_user.id)[0], message.from_user.id)
				db.update_connect_with(message.from_user.id, db.search(message.from_user.id)[0])
				break
		while True:
			await asyncio.sleep(0.5)
			if db.get_connect_with(message.from_user.id)[0] is not None:
				db.delete_from_queue(message.from_user.id)
				db.delete_from_queue(db.get_connect_with(message.from_user.id)[0])
				break
		if db.get_vip_ends(message.from_user.id)[0] is not None and datetime.strptime(
			db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') > datetime.now():
			sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
			user_id = db.get_connect_with(message.from_user.id)[0]
			if db.get_sex(user_id)[0] == 'male':
				sex = '–ú—É–∂—Å–∫–æ–π'
			elif db.get_sex(user_id)[0] == 'female':
				sex = '–ñ–µ–Ω—Å–∫–∏–π'
			await bot.send_message(message.from_user.id,
			                       f'–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï\n'
			                       f'üÖ∞Ô∏è –ò–º—è: {db.get_name(user_id)[0]}\n'
			                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.get_age(user_id)[0]}\n'
			                       f'üë´ –ü–æ–ª: {sex}\n'
			                       f'üåç –°—Ç—Ä–∞–Ω–∞: {db.get_country(user_id)[0]}\n'
			                       f'üèôÔ∏è –ì–æ—Ä–æ–¥: {db.get_city(user_id)[0]}\n'
			                       f'üëç: {db.get_likes(user_id)[0]} üëé: {db.get_dislikes(user_id)[0]}\n',
			                       reply_markup=kb.stop_kb)
		else:
			await bot.send_message(message.from_user.id, '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï', reply_markup=kb.stop_kb)
		if db.get_vip_ends(db.get_connect_with(message.from_user.id)[0])[0] is not None and datetime.strptime(
			db.get_vip_ends(db.get_connect_with(message.from_user.id)[0])[0], '%d.%m.%Y %H:%M') > datetime.now():
			sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
			user_id = message.from_user.id
			if db.get_sex(user_id)[0] == 'male':
				sex = '–ú—É–∂—Å–∫–æ–π'
			elif db.get_sex(user_id)[0] == 'female':
				sex = '–ñ–µ–Ω—Å–∫–∏–π'
			await bot.send_message(db.get_connect_with(message.from_user.id)[0],
			                       f'–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï\n'
			                       f'üÖ∞Ô∏è –ò–º—è: {db.get_name(user_id)[0]}\n'
			                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.get_age(user_id)[0]}\n'
			                       f'üë´ –ü–æ–ª: {sex}\n'
			                       f'üåç –°—Ç—Ä–∞–Ω–∞: {db.get_country(user_id)[0]}\n'
			                       f'üèôÔ∏è –ì–æ—Ä–æ–¥: {db.get_city(user_id)[0]}\n'
			                       f'üëç: {db.get_likes(user_id)[0]} üëé: {db.get_dislikes(user_id)[0]}\n',
			                       reply_markup=kb.stop_kb)
		else:
			await bot.send_message(db.get_connect_with(message.from_user.id)[0], '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï',
			                       reply_markup=kb.stop_kb)
		await Chatting.msg.set()
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['search_male'])
@dp.message_handler(lambda message: message.text == '–ù–∞–π—Ç–∏ ‚ôÇÔ∏è')
async def search_male(message):
	try:
		if db.get_vip_ends(message.from_user.id)[0] is not None and datetime.strptime(
			db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') > datetime.now():
			db.add_to_queue_vip(message.from_user.id, db.get_sex(message.from_user.id)[0], 'male')
			await message.answer('–ò—â–µ–º –¥–ª—è –≤–∞—Å —á–µ–ª–æ–≤–µ—á–∫–∞.. üîç', reply_markup=kb.cancel_search_kb)
			while True:
				await asyncio.sleep(0.5)
				if db.search_vip(message.from_user.id, db.get_sex(message.from_user.id)[0], 'male')[0] is not None:
					db.update_connect_with(
						db.search_vip(message.from_user.id, db.get_sex(message.from_user.id)[0], 'male')[0],
						message.from_user.id)
					db.update_connect_with(
						message.from_user.id, db.search_vip(message.from_user.id,
						                                    db.get_sex(message.from_user.id)[0], 'male')[0])
					break
			while True:
				await asyncio.sleep(0.5)
				if db.get_connect_with(message.from_user.id)[0] is not None:
					db.delete_from_queue(message.from_user.id)
					db.delete_from_queue(db.get_connect_with(message.from_user.id)[0])
					break
				if db.get_vip_ends(message.from_user.id)[0] is not None and datetime.strptime(
					db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') > datetime.now():
					sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
					user_id = db.get_connect_with(message.from_user.id)[0]
					if db.get_sex(user_id)[0] == 'male':
						sex = '–ú—É–∂—Å–∫–æ–π'
					elif db.get_sex(user_id)[0] == 'female':
						sex = '–ñ–µ–Ω—Å–∫–∏–π'
					await bot.send_message(message.from_user.id,
					                       f'–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï\n'
					                       f'üÖ∞Ô∏è –ò–º—è: {db.get_name(user_id)[0]}\n'
					                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.get_age(user_id)[0]}\n'
					                       f'üë´ –ü–æ–ª: {sex}\n'
					                       f'üåç –°—Ç—Ä–∞–Ω–∞: {db.get_country(user_id)[0]}\n'
					                       f'üèôÔ∏è –ì–æ—Ä–æ–¥: {db.get_city(user_id)[0]}\n'
					                       f'üëç: {db.get_likes(user_id)[0]} üëé: {db.get_dislikes(user_id)[0]}\n',
					                       reply_markup=kb.stop_kb)
				else:
					await bot.send_message(message.from_user.id, '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï', reply_markup=kb.stop_kb)
				if db.get_vip_ends(db.get_connect_with(message.from_user.id)[0])[0] is not None and datetime.strptime(
					db.get_vip_ends(db.get_connect_with(message.from_user.id)[0])[0],
					'%d.%m.%Y %H:%M') > datetime.now():
					sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
					user_id = message.from_user.id
					if db.get_sex(user_id)[0] == 'male':
						sex = '–ú—É–∂—Å–∫–æ–π'
					elif db.get_sex(user_id)[0] == 'female':
						sex = '–ñ–µ–Ω—Å–∫–∏–π'
					await bot.send_message(db.get_connect_with(message.from_user.id)[0],
					                       f'–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï\n'
					                       f'üÖ∞Ô∏è –ò–º—è: {db.get_name(user_id)[0]}\n'
					                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.get_age(user_id)[0]}\n'
					                       f'üë´ –ü–æ–ª: {sex}\n'
					                       f'üåç –°—Ç—Ä–∞–Ω–∞: {db.get_country(user_id)[0]}\n'
					                       f'üèôÔ∏è –ì–æ—Ä–æ–¥: {db.get_city(user_id)[0]}\n'
					                       f'üëç: {db.get_likes(user_id)[0]} üëé: {db.get_dislikes(user_id)[0]}\n',
					                       reply_markup=kb.stop_kb)
				else:
					await bot.send_message(db.get_connect_with(message.from_user.id)[0], '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï',
					                       reply_markup=kb.stop_kb)
				await Chatting.msg.set()
		else:
			await message.answer('–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è üëë –≤–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(commands=['search_female'])
@dp.message_handler(lambda message: message.text == '–ù–∞–π—Ç–∏ ‚ôÄÔ∏è')
async def search_female(message):
	try:
		if db.get_vip_ends(message.from_user.id)[0] is not None and datetime.strptime(
			db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') > datetime.now():
			db.add_to_queue_vip(message.from_user.id, db.get_sex(message.from_user.id)[0], 'female')
			await message.answer('–ò—â–µ–º –¥–ª—è –≤–∞—Å —á–µ–ª–æ–≤–µ—á–∫–∞.. üîç', reply_markup=kb.cancel_search_kb)
			while True:
				await asyncio.sleep(0.5)
				if db.search_vip(message.from_user.id, db.get_sex(message.from_user.id)[0], 'female')[0] is not None:
					db.update_connect_with(
						db.search_vip(message.from_user.id, db.get_sex(message.from_user.id)[0], 'female')[0],
						message.from_user.id)
					db.update_connect_with(
						message.from_user.id, db.search_vip(message.from_user.id,
						                                    db.get_sex(message.from_user.id)[0], 'female')[0])
					break
			while True:
				await asyncio.sleep(0.5)
				if db.get_connect_with(message.from_user.id)[0] is not None:
					db.delete_from_queue(message.from_user.id)
					db.delete_from_queue(db.get_connect_with(message.from_user.id)[0])
					break
				if db.get_vip_ends(message.from_user.id)[0] is not None and datetime.strptime(
					db.get_vip_ends(message.from_user.id)[0], '%d.%m.%Y %H:%M') > datetime.now():
					sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
					user_id = db.get_connect_with(message.from_user.id)[0]
					if db.get_sex(user_id)[0] == 'male':
						sex = '–ú—É–∂—Å–∫–æ–π'
					elif db.get_sex(user_id)[0] == 'female':
						sex = '–ñ–µ–Ω—Å–∫–∏–π'
					await bot.send_message(message.from_user.id,
					                       f'–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï\n'
					                       f'üÖ∞Ô∏è –ò–º—è: {db.get_name(user_id)[0]}\n'
					                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.get_age(user_id)[0]}\n'
					                       f'üë´ –ü–æ–ª: {sex}\n'
					                       f'üåç –°—Ç—Ä–∞–Ω–∞: {db.get_country(user_id)[0]}\n'
					                       f'üèôÔ∏è –ì–æ—Ä–æ–¥: {db.get_city(user_id)[0]}\n'
					                       f'üëç: {db.get_likes(user_id)[0]} üëé: {db.get_dislikes(user_id)[0]}\n',
					                       reply_markup=kb.stop_kb)
				else:
					await bot.send_message(message.from_user.id, '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï', reply_markup=kb.stop_kb)
				if db.get_vip_ends(db.get_connect_with(message.from_user.id)[0])[0] is not None and datetime.strptime(
					db.get_vip_ends(db.get_connect_with(message.from_user.id)[0])[0],
					'%d.%m.%Y %H:%M') > datetime.now():
					sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
					user_id = message.from_user.id
					if db.get_sex(user_id)[0] == 'male':
						sex = '–ú—É–∂—Å–∫–æ–π'
					elif db.get_sex(user_id)[0] == 'female':
						sex = '–ñ–µ–Ω—Å–∫–∏–π'
					await bot.send_message(db.get_connect_with(message.from_user.id)[0],
					                       f'–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï\n'
					                       f'üÖ∞Ô∏è –ò–º—è: {db.get_name(user_id)[0]}\n'
					                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.get_age(user_id)[0]}\n'
					                       f'üë´ –ü–æ–ª: {sex}\n'
					                       f'üåç –°—Ç—Ä–∞–Ω–∞: {db.get_country(user_id)[0]}\n'
					                       f'üèôÔ∏è –ì–æ—Ä–æ–¥: {db.get_city(user_id)[0]}\n'
					                       f'üëç: {db.get_likes(user_id)[0]} üëé: {db.get_dislikes(user_id)[0]}\n',
					                       reply_markup=kb.stop_kb)
				else:
					await bot.send_message(db.get_connect_with(message.from_user.id)[0], '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï',
					                       reply_markup=kb.stop_kb)
				await Chatting.msg.set()
		else:
			await message.answer('–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è üëë –≤–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
	except Exception as e:
		warning_log.warning(e)


# @dp.message_handler(lambda message: message.text == 'üôé‚Äç‚ôÇÔ∏è –ü–∞—Ä–Ω—è' or message.text == 'üôç‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫—É')
# async def choose_sex(message):
#     try:
#         if db.queue_exists(message.from_user.id):
#             db.delete_from_queue(message.from_user.id)
#         if message.text == 'üôé‚Äç‚ôÇÔ∏è –ü–∞—Ä–Ω—è':
#             db.add_to_queue(message.from_user.id, db.get_sex(message.from_user.id)[0], 'male')
#             await message.answer('–ò—â–µ–º –¥–ª—è –≤–∞—Å —á–µ–ª–æ–≤–µ—á–∫–∞.. üîç', reply_markup=kb.stop_kb)
#         elif message.text == 'üôç‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫—É':
#             db.add_to_queue(message.from_user.id, db.get_sex(message.from_user.id)[0], 'female')
#             await message.answer('–ò—â–µ–º –¥–ª—è –≤–∞—Å —á–µ–ª–æ–≤–µ—á–∫–∞.. üîç', reply_markup=kb.stop_kb)
#
#         while True:
#             await asyncio.sleep(0.5)
#             if db.search(message.from_user.id)[0] is not None:
#                 if db.get_op_sex(db.search(message.from_user.id)[0])[0] == db.get_sex(message.from_user.id)[0]:
#                     try:
#                         db.update_connect_with(db.search(message.from_user.id)[0], message.from_user.id)
#                         db.update_connect_with(message.from_user.id, db.search(message.from_user.id)[0])
#                         break
#                     except Exception as e:
#                         print(e)
#             while True:
#                 await asyncio.sleep(0.5)
#                 if db.get_connect_with(message.from_user.id)[0] is not None:
#                     break
#             try:
#                 db.delete_from_queue(message.from_user.id)
#                 db.delete_from_queue(db.get_connect_with(message.from_user.id)[0])
#             except:
#                 pass
#             await Chatting.msg.set()
#             await bot.send_message(db.get_connect_with(message.from_user.id)[0], '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï',
#                                    reply_markup=kb.stop_kb)
#             await bot.send_message(message.from_user.id, '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è üíï',
#                                    reply_markup=kb.stop_kb)
#             return
#     except Exception as e:
#         warning_log.warning(e)
#         await send_to_channel_log_exception(message, e)


@dp.message_handler(content_types=ContentTypes.TEXT)
@dp.message_handler(state=Chatting.msg)
async def chatting(message, state: FSMContext):
	try:
		await state.update_data(msg=message.text)
		user_data = await state.get_data()

		if user_data['msg'] == 'üèπ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è' or user_data['msg'] == '/link':
			if message.from_user.username is None:
				await bot.send_message(db.get_connect_with(message.from_user.id)[0],
				                       '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –Ω–∏–∫–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞!')
			else:
				await message.answer('@' + message.from_user.username)
		elif user_data['msg'] == 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥' or user_data['msg'] == '/stop':
			await state.finish()
			await bot.send_message(message.from_user.id,
			                       '–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üòû\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∏–∂–µ',
			                       reply_markup=kb.search_kb, parse_mode=ParseMode.HTML)
			await bot.send_message(db.get_connect_with(message.from_user.id)[0],
			                       '–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üòû\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∏–∂–µ',
			                       reply_markup=kb.search_kb, parse_mode=ParseMode.HTML)
			db.delete_from_queue(db.get_connect_with(message.from_user.id)[0])
			db.delete_from_queue(message.from_user.id)
			db.edit_chats(1, db.get_connect_with(message.from_user.id)[0])
			db.edit_chats(1, message.from_user.id)
			db.save_last_connect(db.get_connect_with(message.from_user.id)[0])
			db.save_last_connect(message.from_user.id)
			db.update_connect_with(None, db.get_connect_with(message.from_user.id)[0])
			db.update_connect_with(None, message.from_user.id)

		elif user_data['msg'].startswith('/admin'):
			if str(message.from_user.id) in config.ADMINS:
				msg = user_data['msg'].strip('/admin')
				print(msg)
				await bot.send_message(db.get_connect_with(message.from_user.id)[0], f'C–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n{msg}')
			else:
				await message.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

		# elif user_data['msg'] == '‚û°Ô∏è–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥':
		#     await search(message, state)
		#
		# elif user_data['msg'] == '–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—Éüé≤':
		#     coin = random.randint(1, 2)
		#
		#     if coin == 1:
		#         coin = text(italic('–†–µ—à–∫–∞'))
		#     else:
		#         coin = text(italic('–û—Ä—ë–ª'))
		#
		#     await message.answer(coin, parse_mode=ParseMode.MARKDOWN)
		#     await bot.send_message(db.get_connect_with(message.from_user.id)[0], coin,
		#     parse_mode=ParseMode.MARKDOWN)
		#
		# elif user_data['msg'] == '–ù–∞–∑–∞–¥':
		#     await state.finish()

		else:
			await bot.send_message(db.get_connect_with(message.from_user.id)[0], user_data['msg'])
			db.log_message(message.from_user.id, user_data['msg'])
			db.edit_messages(1, message.from_user.id)

	except exceptions.ChatIdIsEmpty:
		await state.finish()

	except exceptions.BotBlocked:
		await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç –±–æ—Ç–∞!')
		await state.finish()

	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(content_types=['photo'])
@dp.message_handler(state=Chatting.msg)
async def chatting_photo(message, state: FSMContext):
	try:
		await state.update_data(msg=message.text, photo=message.photo[-1])
		user_data = await state.get_data()
		await bot.send_photo(db.get_connect_with(message.from_user.id)[0], user_data['photo'].file_id,
		                     caption=user_data['msg'])
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(content_types=['video'])
@dp.message_handler(state=Chatting.msg)
async def chatting_video(message, state: FSMContext):
	try:
		await bot.send_video(db.get_connect_with(message.from_user.id)[0], message.video.file_id,
		                     caption=message.text)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(content_types=['animation'])
@dp.message_handler(state=Chatting.msg)
async def chatting_gif(message, state: FSMContext):
	try:
		await bot.send_animation(db.get_connect_with(message.from_user.id)[0], message.animation.file_id,
		                         caption=message.text)
	except Exception as e:
		warning_log.warning(e)


@dp.message_handler(content_types=['sticker'])
@dp.message_handler(state=Chatting.msg)
async def chatting_sticker(message, state: FSMContext):
	try:
		await bot.send_sticker(db.get_connect_with(message.from_user.id)[0], message.sticker.file_id)
	except Exception as e:
		warning_log.warning(e)


# @dp.message_handler(commands=['back'])
# @dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥')
# async def back(message, state: FSMContext):
#     await state.finish()


# –ª–æ–≥–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
# async def send_to_channel_log(message):
#     await bot.send_message(-1111111,
#                            f'ID - {str(message.from_user.id)}\nusername - {str(
#                            message.from_user.username)}\nmessage - {str(message.text)}')
#
#
# async def send_to_channel_log_exception(message, except_name):
#     await bot.send_message(-111111111, f'–û—à–∏–±–∫–∞\n\n{except_name}')


@dp.message_handler()
async def end(message):
	await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã /start –∏ /help')


if __name__ == '__main__':
	print('–†–∞–±–æ—Ç–∞–µ–ºüëå')
	executor.start_polling(dp, skip_updates=True)
